int main()
{
  int data = 0;

  // 위에를 단순히 더한다라기보다는 "한 단계"를 넘어간다 라고 인식하는게 좋음
  // 포인터에서 헷갈릴 수 있음!
  data--;
  data++;


  // 어디에 붙였는지에 따라 연산자 우선순위가 달라짐!
  data = 0;
  ++data;  // 전위
  data++;  // 후위

  // 예
  int a = 10;
  data = a++;
  // ⭐️⭐️⭐️ 뒤에 붙었을 경우(후위연산자) 연산자 우선순위가 가장 마지막! 느림
  // 결국  data 는 10이란 값을 넣고 증가함!! 

  int a = 10;
  data = ++a;
  // 앞에 붙였기 때문에 data에 11이 들어감!! 
  // => 연산의 결과가 달라질 수 있음!!! ⭐️⭐️⭐️
  // 다른연산자랑 같이 쓸 경우 문제가 됨! 

  // ⭐️⭐️⭐️ 그래서 늘! 전위연산자로 쓰는 습관을 들이기!
  
  // ===========================================================

  // 논리 연산자
  // !(역), &&(곱, AND), ||(합, OR)
  // 참(true), 거짓(false)
  // 참은 0이 아닌 값, 
  // 보통 1이라고 하지만 0만 아니면 참으로 봄!
  // (그래서 컴퓨터는 10을 보여줘도 0이 아니기 때문에 True로 봄)
  // 거짓 : 0
 

  // bool 자료형
  // 크기는 1bite
  // 0(false)과 1(true) 만 이해함 

  bool truefalse = true;
  //(truefalse 에는 1이 들어감)

  bool IsTrue = 100;
  // bool은 딱 떨어지는 정수형? 자료형은 아니지만
  // 위같이 넣으면 true 로 받아들임
  // C++ 에서 추가된 것

  IsTrue = !IsTrue;
  // 반전을 시키면 false 가 됨

  int iTrue = 100;
  iTrue = !iTrue;
  // 이렇게 넣어도 false 로 나옴 0아닌 수는 true 이기 때문

  iTrue = 100 && 200;
  // => 이건 둘다 참이기 때문에 참

  iTrue = 0 && 100;
  // => 이건 0 이 있어서 거짓이 있기때문에 거짓

  
  // 비교 연산자
  // == , != , < , > 
  // ⭐️⭐️⭐️ 구문 
  // 1. if, else 
  if(100 && 200)     // 이 안에는 참이라는게 됨 
  {
    data = 100;      // 조건이 참이기 때문에 안에 들어와 data에 값이 부여됨
  }

    if(0 && 200)     // 거짓
  {
    data = 200;      // 조건이 거짓이기에 안으로 들어올 수 없음
  }

  if (data == 200)   // 위에서 수행이 안되기 때문에 이 코드는 실행 될 수 없음 // 그러나 이런 코드를 적는 이유는 가변적인 상황때문에 실행될지도 안될 수도 있기 떄문에 적는것! 
  {                  
     // 참인 경우 수행
  }
  else 
  {
     // 거짓인 경우 수행
  }


  // else if 는 하나라도 걸려라인 명령어
  // if, else if, else if 중 하나라도 걸리면 다른 조건은 보지 않고 바로 실행
  // ⭐️⭐️⭐️ 즉, 위에서 if에서 걸리면 다음 else if 들으 조건 체크 없이 바로 넘어감
  // if()
  // {

  // }
  // else if()
  // {

  // }
  // else if()
  // {
    
  // }
  // else
  // {

  // }

  // 2. switch case 

  switch (10)
  {
    case 10:

        break;
    case 20:
      
        break;
    default:
        break;
  }


  // 위의 switch-case를 if로 만들 수 도 있음
  // 둘 다 거의 비슷하지만 
  // switch-case 는 코드를 간결하게 만들 수 있는 장점이 있기 때문에 각자 상황에 맞게 쓰는게 좋음
  int iTest = 10;
  if(iTest == 10)
  {

  }
  else if (iTest = 20)
  {

  }


  // break를 넣지 않을 경우
    switch (10)
  {
    case 10:

        break;
    case 20:
                   // 여기서 break 를 안적으면 default까지 다 수행하고 break로 나가게 됨
    default:       // 문법오류로 잡히지 않기 때문에 주의
        break;
  }
  

  // or 연산자를 표현
  switch(iTest)
  {
    case 10:
    case 20:
    case 30:       // iTest가 10, 20, 30 일경우에 이렇게 작성하기도 함.

    default:
        break;
  }

  // if 문으로 바꿀 수 있음
  if(iTest == 10 || iTest == 20 || iTest == 30)   // 셋 중 하나가 참이면 참으로 본다.
  {

  }

  // 3. 삼항연산자
  // :?
  iTest == 20 ? iTest = 100 : iTest = 200;

  // 위 코드를 아래와 같이 표현할 수 있음 
  if(iTest == 20)
  {
    iTest = 100;
  }
  else 
  {
    iTest = 200;
  }

}